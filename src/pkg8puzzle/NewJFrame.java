/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg8puzzle;

import java.awt.Point;
import java.util.ArrayList;

/**
 *
 * @author jirka
 */
public class NewJFrame extends javax.swing.JFrame {
    
    public ArrayList<Point> matrix;
    public ArrayList<ArrayList<Point>> database;
    public boolean isSolved = false;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        //Main main = new Main();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        list1 = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jLabel4.setText("jLabel4");

        jLabel5.setText("jLabel5");

        jLabel6.setText("jLabel6");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        jButton1.setText("Solve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        list1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(35, 35, 35)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        init();
        isSolved = false;
        list1.removeAll();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list1ActionPerformed

    public void init(){
        
        
        matrix = new ArrayList<>();
        database = new ArrayList<>();
        
        for(int i = 0; i < 9; i++){
            matrix.add(new Point(Character.getNumericValue(jTextArea1.getText().charAt(i)),i+1));
            //System.out.println(jTextArea1.getText().charAt(i));
        }
        /*matrix.add(new Point(1,1));
        matrix.add(new Point(9,2));
        matrix.add(new Point(3,3));
       
        matrix.add(new Point(4,4));
        matrix.add(new Point(2,5));
        matrix.add(new Point(5,6));
        
        matrix.add(new Point(7,7));
        matrix.add(new Point(8,8));
        matrix.add(new Point(6,9));*/
        
        
        Thread thread = new Thread(new Runnable(){
            public void run(){
               while(!isSolved){
                  solve(database, matrix, 12); 
               }
            }
        });
        thread.start();     
    }
    
     public void solve(ArrayList<ArrayList<Point>> database, ArrayList<Point> list, int generation){                
        if(generation != 0 && !isSolved){
            setLabels(list);                     
            printMatrix(list);
            if(!isSolved(list)){
                int index = getSpaceIndex(list);
                
                if(index!=3 && index != 6 && index != 9){
                    ArrayList<Point> adList = new ArrayList<>();
                    for(int i = 0; i < list.size();i++){
                        adList.add(list.get(i));
                    }
                    
                    ArrayList<ArrayList<Point>> db = new ArrayList<>();   
                    for(int i = 0; i < database.size(); i++){
                        db.add(database.get(i));
                    }                   
                    db.add(adList);                    
                    rightSwap(adList, index); 
                    
                    if(generation != 0){
                        solve(db, adList, generation -1);
                    }
                } 

                if(index!=1 && index != 4 && index != 7){
                    ArrayList<Point> adList = new ArrayList<>();
                    for(int i = 0; i < list.size();i++){
                        adList.add(list.get(i));
                    }
                    leftSwap(adList, index);    
                    
                    ArrayList<ArrayList<Point>> db = new ArrayList<>();
                    for(int i = 0; i < database.size(); i++){
                        db.add(database.get(i));
                    }                   
                    db.add(adList);
                    if(generation != 0){
                        solve(db, adList,generation -1);
                    }
                } 

                if(index!=1 && index != 2 && index != 3){
                    ArrayList<Point> adList = new ArrayList<>();
                    for(int i = 0; i < list.size();i++){
                        adList.add(list.get(i));
                    }
                    topSwap(adList,index);  
                    
                    ArrayList<ArrayList<Point>> db = new ArrayList<>();
                    for(int i = 0; i < database.size(); i++){
                        db.add(database.get(i));
                    }                   
                    db.add(adList);
                    
                    if(generation != 0){
                        solve(db, adList,generation -1);
                    }
                } 

                if(index!=7 && index != 8 && index != 9){
                    ArrayList<Point> adList = new ArrayList<>();
                    for(int i = 0; i < list.size();i++){
                        adList.add(list.get(i));
                    }
                    downSwap(adList, index);   
                    
                    ArrayList<ArrayList<Point>> db = new ArrayList<>();
                    for(int i = 0; i < database.size(); i++){
                        db.add(database.get(i));
                    }                   
                    db.add(adList);
                    
                    if(generation != 0){
                        solve(db, adList,generation -1);
                    }
                }   
            }else{              
              System.out.println("SUCCESS");                                      
              for(ArrayList ls : removeDuplicates(database)){
                  printMatrix(ls);
                  
                  list1.add(getStringValue(ls));
              }
              setLabels(list);
              System.out.println("SUCCESS");
              isSolved = true;
              //System.exit(0);
            }
        }
    }
    
     
    public <T> ArrayList<T> removeDuplicates(ArrayList<T> list) { 
        ArrayList<T> newList = new ArrayList<T>();   
        for (T element : list) {         
            if (!newList.contains(element)) { 
                newList.add(element); 
            } 
        }  
        return newList; 
    } 
    
    
    public void printMatrix(ArrayList<Point> list){
        for(int i = 0; i < list.size(); i++){
             if(i%3==0){
                System.out.println("");
            }
            System.out.print(list.get(i).x +" ");          
        }
        System.out.println("");
        System.out.println("");
    }
    
    public String getStringValue(ArrayList<Point> list){
        StringBuilder builder = new StringBuilder();
        
        for(int i = 0; i < list.size(); i++){
            if(list.get(i).x != 9){
                builder.append(list.get(i).x);
            }else{
                builder.append("0");
            }
        }
        return builder.toString();
    }
    
    public ArrayList<Point> leftSwap(ArrayList<Point> list, int index){
        list.set(index-1, new Point(list.get(index-2).x, index));
        list.set(index-2, new Point(9,index-1));
        return list;
    }
    
    public ArrayList<Point> rightSwap(ArrayList<Point> list, int index){
        list.set(index-1, new Point(list.get(index).x, index));
        list.set(index, new Point(9,index+1));
        return list;
    }
      
    public ArrayList<Point> topSwap(ArrayList<Point> list, int index){
        list.set(index-1, new Point(list.get(index-4).x, index));
        list.set(index-4, new Point(9,index-3));
        return list;
    }
    
    public ArrayList<Point> downSwap(ArrayList<Point> list, int index){
        list.set(index-1, new Point(list.get(index+2).x, index));
        list.set(index+2, new Point(9,index+3));
        return list;
    }
    
    public boolean isSolved(ArrayList<Point> list){
         for(int i = 0; i < list.size();i++){
            if(list.get(i).x != i+1){
                return false;
            }
        } 
        return true;
    }
    
    public void setLabels(ArrayList<Point> list){
        jLabel1.setText(String.valueOf(list.get(0).x));
        jLabel2.setText(String.valueOf(list.get(1).x));
        jLabel3.setText(String.valueOf(list.get(2).x));
        jLabel4.setText(String.valueOf(list.get(3).x));
        jLabel5.setText(String.valueOf(list.get(4).x));
        jLabel6.setText(String.valueOf(list.get(5).x));
        jLabel7.setText(String.valueOf(list.get(6).x));
        jLabel8.setText(String.valueOf(list.get(7).x));
        jLabel9.setText(String.valueOf(list.get(8).x));
    }
    public int getSpaceIndex(ArrayList<Point> list){
        for(int i = 0; i < list.size();i++){
            if(list.get(i).x == 9){
                return list.get(i).y;
            }
        }
        return 1;
    }   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables
}
